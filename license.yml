license:
  get:
    summary: Get the current License.
    description: Get the current License.
    tags:
      - License
    parameters:
      - $ref: './common.yml#/parameters/authorization'
    responses:
      '200':
        $ref: '#/responses/LicenseDetails'
      '401':
        $ref: './common.yml#/responses/TokenError'
      '403':
        $ref: './common.yml#/responses/PermissionError'
      '500':
        $ref: './common.yml#/responses/UnexpectedError'
  post:
    summary: Upload a new License.
    description: Upload a new License and override the existing one.
    tags:
      - License
    parameters:
      - $ref: './common.yml#/parameters/authorization'
    responses:
      '200':
        $ref: '#/responses/License'
      '400':
        $ref: './common.yml#/responses/JsonError'
      '401':
        $ref: './common.yml#/responses/TokenError'
      '403':
        $ref: './common.yml#/responses/PermissionError'
      '422':
        $ref: './common.yml#/responses/ValidationError'
      '500':
        $ref: './common.yml#/responses/UnexpectedError'
    requestBody:
      $ref: '#/requestBodies/LicenseImport'
  delete:
    summary: Delete all Licenses.
    description: Delete all Licenses to revert to the Built-in License.
    deprecated: true
    tags:
      - License
    parameters:
      - $ref: './common.yml#/parameters/authorization'
    responses:
      '204':
        description: Licenses were deleted successfully.
      '401':
        $ref: './common.yml#/responses/TokenError'
      '403':
        $ref: './common.yml#/responses/PermissionError'
      '500':
        $ref: './common.yml#/responses/UnexpectedError'
license-id:
  delete:
    summary: Delete a specific License.
    description: Delete a specific License from list of Licenses.
    tags:
      - License
    parameters:
      - $ref: './common.yml#/parameters/authorization'
      - $ref: './common.yml#/parameters/id'
    responses:
      '204':
        description: License was deleted successfully.
      '401':
        $ref: './common.yml#/responses/TokenError'
      '403':
        $ref: './common.yml#/responses/PermissionError'
      '404':
        $ref: './common.yml#/responses/NotFoundError'
      '500':
        $ref: './common.yml#/responses/UnexpectedError'
license-next:
  get:
    summary: Get the next License.
    description: >-
      Get the next License which will be activated when CA certificate switch occurs.
      Licenses are bound to the CA Certificate.
    tags:
      - License
    parameters:
      - $ref: './common.yml#/parameters/authorization'
    responses:
      '200':
        $ref: '#/responses/LicenseDetails'
      '401':
        $ref: './common.yml#/responses/TokenError'
      '403':
        $ref: './common.yml#/responses/PermissionError'
      '422':
        $ref: './common.yml#/responses/ValidationError'
      '500':
        $ref: './common.yml#/responses/UnexpectedError'
  post:
    summary: Upload a new next License.
    description: Upload a new next License to be switched when CA certificate is switched.
    tags:
      - License
    parameters:
      - $ref: './common.yml#/parameters/authorization'
    responses:
      '200':
        $ref: '#/responses/License'
      '400':
        $ref: './common.yml#/responses/JsonError'
      '401':
        $ref: './common.yml#/responses/TokenError'
      '403':
        $ref: './common.yml#/responses/PermissionError'
      '422':
        $ref: './common.yml#/responses/ValidationError'
      '500':
        $ref: './common.yml#/responses/UnexpectedError'
    requestBody:
      $ref: '#/requestBodies/LicenseImport'
  delete:
    summary: Delete the next License.
    description: Delete the next License.
    tags:
      - License
    parameters:
      - $ref: './common.yml#/parameters/authorization'
    responses:
      '204':
        description: License was deleted successfully.
      '401':
        $ref: './common.yml#/responses/TokenError'
      '403':
        $ref: './common.yml#/responses/PermissionError'
      '500':
        $ref: './common.yml#/responses/UnexpectedError'

responses:
  LicenseDetails:
    description: License details including usage.
    content:
      application/json:
        schema:
          $ref: '#/definitions/LicenseDetails'
  License:
    description: License details.
    content:
      application/json:
        schema:
          $ref: '#/definitions/License'

requestBodies:
  LicenseImport:
    description: License import.
    content:
      application/json:
        schema:
          $ref: '#/definitions/LicenseImport'
    required: true

definitions:
  LicenseDetails:
    type: object
    description: License details and current usage.
    properties:
      licenses:
        type: array
        items:
          $ref: '#/definitions/License'
      entitled:
        $ref: '#/definitions/LicenseEntitlement'
      requestCode:
        type: string
        description: Request code for the license. Use this code to get a license.
          It's based on the CA certificate.
      usage:
        type: object
        description: License usage information.
        properties:
          users:
            type: number
            description: The amount of licensed users in the system currently.
            example: 152
          portalUsers:
            type: number
            description: The amount of licensed portal users in the system currently.
            example: 24
          sites:
            type: number
            description: The amount of Sites in the system currently.
            example: 3
          connectorGroups:
            type: number
            description: The amount of grouped Connector clients in the system currently.
            example: 4
      error:
        type: string
        deprecated: true
        description: Error message if there is a problem with one or more License.
        example: License has expired.
  LicenseEntitlement:
    type: object
    description: License entitlement details.
    properties:
      maxUsers:
        type: number
        description: The maximum users allowed by the license.
        example: 200
      maxPortalUsers:
        type: number
        description: The maximum Portal users allowed by the license.
        example: 200
      usersLeaseTimeHours:
        type: number
        description: >-
          Number of hours User Licenses will be reserved for users before they are reclaimable by others.
        example: 720
      portalUsersLeaseTimeHours:
        type: number
        description: >-
          Number of hours User Licenses will be reserved for Portal users before they are reclaimable by others.
        example: 720
      maxSites:
        type: number
        description: >-
          The maximum sites allowed by the license.
          If it's the usage details, then it's the amount of sites in the system currently.
        example: 5
      maxConnectorGroups:
        type: number
        description: The maximum Connector groups allowed by the license.
        example: 150
  License:
    allOf:
      - $ref: '#/definitions/LicenseEntitlement'
      - type: object
        description: License details.
        properties:
          id:
            type: string
            format: uuid
            description: Unique ID for the license.
            example: 4c07bc67-57ea-42dd-b702-c2d6c45419fc
          version:
            type: number
            description: License version. There can be only one v1 License in the system, while v2 Licenses can be added as extra.
            example: 2
          type:
            type: number
            description: 'Type of the license. 1: production, 2: installation, 3: test, 4: built-in, 5: aws built-in'
            example: 2
          request:
            type: string
            description: >-
              Request code for the license. If built-in license is in place, use this code to get a license.
              It's based on the CA certificate.
            example: 1675ab19fe2
          expiration:
            type: string
            format: 'date-time'
            description: The expiration date of the license.
          error:
            type: string
            description: Error message if the License is not invalid.
            example: License has expired.
  LicenseImport:
    type: object
    description: Object to import a new license.
    required:
      - license
    properties:
      license:
        type: string
        description: The license file contents for this Controller (with the matching request code).
