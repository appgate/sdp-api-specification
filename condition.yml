conditions:
  get:
    summary: List all Conditions.
    description: List all Conditions visible to current user.
    tags:
      - Conditions
    parameters:
      - $ref: './common.yml#/parameters/authorization'
      - $ref: './common.yml#/parameters/query'
      - $ref: './common.yml#/parameters/range'
      - $ref: './common.yml#/parameters/orderBy'
      - $ref: './common.yml#/parameters/descending'
      - $ref: './common.yml#/parameters/filterBy'
    responses:
      '200':
        description: List of Conditions.
        content:
          application/json:
            schema:
              $ref: '#/definitions/ConditionList'
      '401':
        $ref: './common.yml#/responses/TokenError'
      '403':
        $ref: './common.yml#/responses/PermissionError'
      '500':
        $ref: './common.yml#/responses/UnexpectedError'
  post:
    summary: Create a new Condition.
    description: Create a new Condition.
    tags:
      - Conditions
    parameters:
      - $ref: './common.yml#/parameters/authorization'
    responses:
      '200':
        description: Created Condition.
        content:
          application/json:
            schema:
              $ref: '#/definitions/Condition'
      '400':
        $ref: './common.yml#/responses/JsonError'
      '401':
        $ref: './common.yml#/responses/TokenError'
      '403':
        $ref: './common.yml#/responses/PermissionError'
      '409':
        $ref: './common.yml#/responses/ConflictError'
      '422':
        $ref: './common.yml#/responses/ValidationError'
      '500':
        $ref: './common.yml#/responses/UnexpectedError'
    requestBody:
      $ref: '#/requestBodies/Condition'
conditions-id:
  get:
    summary: Get a specific Condition.
    description: Get a specific Condition.
    tags:
      - Conditions
    parameters:
      - $ref: './common.yml#/parameters/authorization'
      - $ref: './common.yml#/parameters/id'
    responses:
      '200':
        description: Single Condition.
        content:
          application/json:
            schema:
              $ref: '#/definitions/Condition'
      '401':
        $ref: './common.yml#/responses/TokenError'
      '403':
        $ref: './common.yml#/responses/PermissionError'
      '404':
        $ref: './common.yml#/responses/NotFoundError'
      '500':
        $ref: './common.yml#/responses/UnexpectedError'
  put:
    summary: Update an existing Condition.
    description: Update an existing Condition.
    tags:
      - Conditions
    parameters:
      - $ref: './common.yml#/parameters/authorization'
      - $ref: './common.yml#/parameters/id'
    responses:
      '200':
        description: Updated Condition.
        content:
          application/json:
            schema:
              $ref: '#/definitions/Condition'
      '400':
        $ref: './common.yml#/responses/JsonError'
      '401':
        $ref: './common.yml#/responses/TokenError'
      '403':
        $ref: './common.yml#/responses/PermissionError'
      '404':
        $ref: './common.yml#/responses/NotFoundError'
      '422':
        $ref: './common.yml#/responses/ValidationError'
      '500':
        $ref: './common.yml#/responses/UnexpectedError'
    requestBody:
      $ref: '#/requestBodies/Condition'
  delete:
    summary: Delete a specific Condition.
    description: Delete a specific Condition.
    tags:
      - Conditions
    parameters:
      - $ref: './common.yml#/parameters/authorization'
      - $ref: './common.yml#/parameters/id'
    responses:
      '204':
        description: Condition was deleted successfully.
      '401':
        $ref: './common.yml#/responses/TokenError'
      '403':
        $ref: './common.yml#/responses/PermissionError'
      '404':
        $ref: './common.yml#/responses/NotFoundError'
      '500':
        $ref: './common.yml#/responses/UnexpectedError'
conditions-test:
  post:
    summary: Simulate a given expression for a Condition, Policy or Criteria Script.
    description: Simulate a given expression for a Condition, Policy or Criteria Script.
    tags:
      - Conditions
    parameters:
      - $ref: './common.yml#/parameters/authorization'
    responses:
      '200':
        description: Evaluation result.
        content:
          application/json:
            schema:
              type: object
              properties:
                result:
                  type: boolean
                  description: Whether the evaluation succeeded or not.
                output:
                  type: string
                  description: The output logs from the evaluation. Generated by "console.log" and "print" functions.
                  example: Debug log
                error:
                  type: string
                  description: The error text. Available if the evaluation has an error.
                  example: 'Expression does not return boolean. Received: String'
      '400':
        $ref: './common.yml#/responses/JsonError'
      '401':
        $ref: './common.yml#/responses/TokenError'
      '403':
        $ref: './common.yml#/responses/PermissionError'
      '422':
        $ref: './common.yml#/responses/ValidationError'
      '500':
        $ref: './common.yml#/responses/UnexpectedError'
    requestBody:
      description: The evaluation details.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/definitions/TestRequest'

requestBodies:
  Condition:
    content:
      application/json:
        schema:
          $ref: '#/definitions/Condition'
    description: Condition object.
    required: true

definitions:
  ConditionList:
    allOf:
      - $ref: './common.yml#/definitions/ResultList'
      - type: object
        description: Represents a list of Conditions.
        properties:
          data:
            type: array
            description: List of Conditions.
            items:
              $ref: '#/definitions/Condition'
  Condition:
    allOf:
      - $ref: './common.yml#/definitions/BaseEntity'
      - type: object
        description: Represents a Condition.
        required:
          - expression
        properties:
          expression:
            type: string
            description: Boolean expression in JavaScript.
            example: |-
              var result = false;
              if/*password*/(claims.user.hasPassword('test', 60))/*end password*/ { return true; }
              return result;
          repeatSchedules:
            type: array
            description: >-
              A list of schedules that decides when to reevaluate
              the Condition. All the scheduled times will be effective. One
              will not override the other.
              - It can be a time of the day, e.g. 13:00, 10:25, 2:10 etc.
              - It can be one of the predefined
                intervals, e.g. 1m, 5m, 15m, 1h. These intervals
                will be always rounded up, i.e. if it's 15m and the
                time is 12:07 when the Condition is evaluated
                first, then the next evaluation will occur at
                12:15, and the next one will be at
                12:30 and so on.
            items:
              type: string
            example:
              - 1h
              - '13:32'
          remedyMethods:
            description: The remedy methods that will be triggered if the evaluation fails.
            type: array
            items:
              type: object
              required:
                - type
                - message
              properties:
                type:
                  type: string
                  description: remedy method type.
                  enum:
                    - DisplayMessage
                    - OtpAuthentication
                    - PasswordAuthentication
                    - Reason
                message:
                  type: string
                  description: Message to be shown to the user. Required for all remedy method.
                  example: This resoure requires you to enter your password again
                claimSuffix:
                  type: string
                  description: >-
                    Suffix to be added to the claim.
                    Required for OtpAuthentication, PasswordAuthentication and Reason remedy methods.
                  example: test
                providerId:
                  type: string
                  format: uuid
                  x-uuid-ref: MfaProvider
                  description: MFA Provider Id. Required for OtpAuthentication remedy method.
                  example: 4c07bc67-57ea-42dd-b702-c2d6c45419fc
  TestRequest:
    type: object
    required:
      - expression
    properties:
      expression:
        type: string
        description: The javascript expression to evaluate.
        example: "return claims.user.username === 'admin';"
      userClaims:
        type: object
        additionalProperties: true
        example:
          username: admin
          groups:
            - 'CN=test,OU=unit,DC=company,DC=com'
            - 'CN=finance,OU=unit,DC=company,DC=com'
      deviceClaims:
        type: object
        additionalProperties: true
        example:
          os:
            name: Microsoft Windows 10 Pro
            platform: x64
            type: desktop
          isUserAdmin: true
          language: en-us
      systemClaims:
        type: object
        additionalProperties: true
        example:
          connectTime: '2018-11-16T13:25:15.672Z'
          tunIPv4: '15.0.0.24'
          clientSrcIp: '192.168.111.184'
      time:
        type: string
        format: date-time
